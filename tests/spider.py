#!/usr/bin/env python3
import time
import os
from zapv2 import ZAPv2

# URL de l'application cible
target = 'https://regisono.com'

# R√©cup√©ration de la cl√© API ZAP depuis les variables d'environnement
apiKey = os.getenv("ZAP_API_KEY")

# V√©rification de la pr√©sence de la cl√© API
if not apiKey:
    print("‚ùå ERREUR : La cl√© API ZAP n'est pas d√©finie. V√©rifiez votre pipeline.")
    exit(1)

# Connexion √† l'API OWASP ZAP avec le bon port
zap = ZAPv2(apikey=apiKey, proxies={'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'})

# V√©rifier la connexion
try:
    print(f"üîÑ Connexion √† ZAP... Version : {zap.core.version}")
except Exception as e:
    print(f"‚ùå ERREUR : Impossible de se connecter √† ZAP : {e}")
    exit(1)

# Attendre que ZAP soit pr√™t
print("‚è≥ Attente du d√©marrage de ZAP...")
time.sleep(10)

# V√©rifier si l'API est accessible
try:
    version = zap.core.version
    print(f"‚úÖ ZAP est pr√™t (Version : {version})")
except Exception as e:
    print(f"‚ùå ERREUR : L'API ZAP ne r√©pond pas : {e}")
    exit(1)

# Lancer le Spider Scan
print(f"üï∑ Lancement du Spider sur {target}")
scanID = zap.spider.scan(target)

# V√©rifier si le scan a d√©marr√© correctement
if scanID.isdigit():
    while int(zap.spider.status(scanID)) < 100:
        print(f"‚è≥ Progression du scan : {zap.spider.status(scanID)}%")
        time.sleep(2)

    print("‚úÖ Spider termin√© avec succ√®s !")
    print("\nüåç URLs d√©couvertes :")
    print('\n'.join(zap.spider.results(scanID)))
else:
    print("‚ùå √âchec du lancement du Spider. V√©rifiez l'API ZAP.")
    exit(1)
